"""

"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


def on_start(container):
    phantom.debug('on_start() called')

    # call 'coalesce_destinations' block
    coalesce_destinations(container=container)

    return

def call_find_peers(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("call_find_peers() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    format_saved_search_call = phantom.get_format_data(name="format_saved_search_call")

    parameters = []

    if format_saved_search_call is not None:
        parameters.append({
            "query": format_saved_search_call,
            "command": "savedsearch",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="call_find_peers", assets=["es_03"], callback=l5_mm_03_save_peer_list_4)

    return


def format_saved_search_call(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_saved_search_call() called")

    template = """find_peers serverName=\"{0}\"\n"""

    # parameter list for template variable replacement
    parameters = [
        "coalesce_destinations:custom_function_result.data.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_saved_search_call", drop_none=True)

    call_find_peers(container=container)

    return


def coalesce_destinations(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("coalesce_destinations() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.destinationAddress","artifact:*.cef.destinationHostName","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]
    container_artifact_cef_item_1 = [item[1] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_1": container_artifact_cef_item_0,
        "input_2": container_artifact_cef_item_1,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="community/list_merge", parameters=parameters, name="coalesce_destinations", callback=format_saved_search_call)

    return


def add_comment_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_comment_2() called")

    format_total_count_comment = phantom.get_format_data(name="format_total_count_comment")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment=format_total_count_comment)

    format_es_event_comment(container=container)

    return


def format_total_count_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_total_count_comment() called")

    template = """Total number of peer servers: {0}\n"""

    # parameter list for template variable replacement
    parameters = [
        "call_find_peers:action_result.summary.total_events"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_total_count_comment", drop_none=True)

    add_comment_2(container=container)

    return


def set_event_to_in_progress(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("set_event_to_in_progress() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    owner_name_value = container.get("owner_name", None)
    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.event_id","artifact:*.id"])
    format_es_event_comment = phantom.get_format_data(name="format_es_event_comment")

    parameters = []

    # build parameters list for 'set_event_to_in_progress' call
    for container_artifact_item in container_artifact_data:
        if container_artifact_item[0] is not None:
            parameters.append({
                "owner": owner_name_value,
                "status": "",
                "comment": format_es_event_comment,
                "event_ids": container_artifact_item[0],
                "integer_status": 2,
                "context": {'artifact_id': container_artifact_item[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update event", parameters=parameters, name="set_event_to_in_progress", assets=["es_03"], callback=l5_mm_create_containers_from_list_5)

    return


def format_es_event_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_es_event_comment() called")

    template = """Notable event is being processed by SOAR: {0}\n"""

    # parameter list for template variable replacement
    parameters = [
        "container:url"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_es_event_comment")

    set_event_to_in_progress(container=container)

    return


def add_comment_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_comment_3() called")

    format_es_event_comment = phantom.get_format_data(name="format_es_event_comment")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment=format_es_event_comment)

    return


def l5_mm_03_save_peer_list_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("l5_mm_03_save_peer_list_4() called")

    id_value = container.get("id", None)
    call_find_peers_result_data = phantom.collect2(container=container, datapath=["call_find_peers:action_result.data.*.peer","call_find_peers:action_result.data.*.priority","call_find_peers:action_result.data.*.count","call_find_peers:action_result.parameter.context.artifact_id"], action_results=results)

    call_find_peers_result_item_0 = [item[0] for item in call_find_peers_result_data]
    call_find_peers_result_item_1 = [item[1] for item in call_find_peers_result_data]
    call_find_peers_result_item_2 = [item[2] for item in call_find_peers_result_data]

    parameters = []

    parameters.append({
        "peer": call_find_peers_result_item_0,
        "priority": call_find_peers_result_item_1,
        "count": call_find_peers_result_item_2,
        "container_id": id_value,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="local/L5_MM_03_save_peer_list", parameters=parameters, name="l5_mm_03_save_peer_list_4", callback=format_total_count_comment)

    return


def playbook_mm_create_containers_from_list_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("playbook_mm_create_containers_from_list_1() called")

    l5_mm_03_save_peer_list_4__result = phantom.collect2(container=container, datapath=["l5_mm_03_save_peer_list_4:custom_function_result.data.result_list_name"])

    l5_mm_03_save_peer_list_4_data_result_list_name = [item[0] for item in l5_mm_03_save_peer_list_4__result]

    inputs = {
        "peer_list_name": l5_mm_03_save_peer_list_4_data_result_list_name,
    }

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    # call playbook "local/MM_Create Containers from List", returns the playbook_run_id
    playbook_run_id = phantom.playbook("local/MM_Create Containers from List", container=container, inputs=inputs)

    return


def l5_mm_create_containers_from_list_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("l5_mm_create_containers_from_list_5() called")

    call_find_peers_result_data = phantom.collect2(container=container, datapath=["call_find_peers:action_result.data","call_find_peers:action_result.parameter.context.artifact_id"], action_results=results)

    call_find_peers_result_item_0 = [item[0] for item in call_find_peers_result_data]

    parameters = []

    parameters.append({
        "container_label": "notable",
        "to_be_containerized": call_find_peers_result_item_0,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="local/L5_MM_Create_containers_from_list", parameters=parameters, name="l5_mm_create_containers_from_list_5")

    return


def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    ################################################################################
    ## Custom Code End
    ################################################################################

    return