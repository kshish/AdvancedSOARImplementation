{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_1",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {
                        "input_spec": [
                            {
                                "name": "Name is required"
                            }
                        ]
                    },
                    "id": "0",
                    "type": "start",
                    "x": 20,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 20,
                    "y": 444
                },
                "3": {
                    "data": {
                        "action": "get data",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get Custom Lists",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "http"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_custom_lists",
                        "id": "3",
                        "parameters": {
                            "location": "/decided_list?_filter_name__startswith=\"temp_\"",
                            "verify_certificate": false
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            },
                            {
                                "data_type": "boolean",
                                "field": "verify_certificate"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "x": 0,
                    "y": 148
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Delete Lists",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "delete_lists",
                        "id": "4",
                        "inputParameters": [
                            "get_custom_lists:action_result.data.*.parsed_response_body"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    lists = get_custom_lists_result_data[0][0][\"data\"]\n    for list_obj in lists:\n        rest_url = phantom.build_phantom_rest_url('decided_list', list_obj[\"id\"])\n        phantom.requests.delete(rest_url, verify=False)\n\n",
                    "x": 0,
                    "y": 300
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.0.84310"
    },
    "create_time": "2022-07-15T06:14:04.750258+00:00",
    "draft_mode": false,
    "labels": [
        "system"
    ],
    "tags": []
}