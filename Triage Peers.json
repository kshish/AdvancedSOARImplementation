{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                }
            ],
            "hash": "62bc0933377b1b10c99827b2c08dd8cd15446624",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.99999999999966
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Parse List",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "parse_list",
                        "id": "2",
                        "inputParameters": [
                            "playbook_input:list_name"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    # phantom.debug(\"parse_list input = {}\".format(playbook_input_list_name[0][0]))\n    sta, msg, read_list__peer_list = phantom.get_list(list_name=playbook_input_list_name[0][0] )\n    # phantom.debug(read_list__peer_list)\n    for server in read_list__peer_list:\n        phantom.debug(server)\n        if server[1] in [\"critical\",\"high\"]:\n            phantom.debug(\"%s is priority %s\" % (server[0],server[1]))\n            status, message, cid = phantom.create_container(name=\"Possible server malware\", label=\"events\")\n            #phantom.set_severity(cid, \"high\")\n            phantom.add_artifact(container=cid, raw_data={}, cef_data={\"sourceAddress\":server[0]}, label=\"infection\", name=\"Possibly infected host\", severity=\"high\", artifact_type=\"host\")\n    \n\n",
                    "x": 980,
                    "y": 560
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [],
                "description": "Name of custom list",
                "name": "List Name"
            }
        ],
        "output_spec": null,
        "playbook_trigger": "artifact_created",
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.0.84310"
    },
    "create_time": "2024-12-11T21:03:51.127529+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}